let input = `../.. => ..#/.#./...
#./.. => .../#../.##
##/.. => .##/###/##.
.#/#. => #.#/..#/#.#
##/#. => .../.##/...
##/## => ##./..#/..#
.../.../... => ##../..../##../.###
#../.../... => ...#/.#.#/.#../.#.#
.#./.../... => #.#./...#/#.#./.##.
##./.../... => ..#./#.##/#.../.###
#.#/.../... => ##../##.#/..#./#.##
###/.../... => ..../.#.#/.###/#..#
.#./#../... => #..#/#.../.##./....
##./#../... => #.##/..##/####/.###
..#/#../... => ..#./#.##/####/####
#.#/#../... => .##./#.##/#.#./##.#
.##/#../... => #.##/####/.###/...#
###/#../... => ..../#.#./##.#/..##
.../.#./... => .###/.##./##../.##.
#../.#./... => ..../#.##/...#/#.#.
.#./.#./... => ...#/####/.##./#...
##./.#./... => .###/#.##/###./....
#.#/.#./... => #.##/###./..../..#.
###/.#./... => .#../#.#./#.##/#.##
.#./##./... => .###/##../..##/#..#
##./##./... => ..#./#.#./.#.#/##.#
..#/##./... => .#../####/...#/..##
#.#/##./... => ..../##.#/.##./....
.##/##./... => .#.#/.#.#/.##./####
###/##./... => ##.#/..../..../....
.../#.#/... => ..##/##../##.#/###.
#../#.#/... => ####/#.##/#.../###.
.#./#.#/... => ..../#..#/..##/.#..
##./#.#/... => #.../..##/##../..#.
#.#/#.#/... => ...#/#.#./#.#./#...
###/#.#/... => ###./###./##.#/###.
.../###/... => ..#./###./##.#/####
#../###/... => ##.#/..#./##../..##
.#./###/... => #.../#.##/##../....
##./###/... => ..##/.#.#/#..#/#.##
#.#/###/... => #.##/..#./.#../..##
###/###/... => ..#./#..#/####/.##.
..#/.../#.. => ##.#/#.##/...#/###.
#.#/.../#.. => #..#/..#./##../###.
.##/.../#.. => ..#./.#../###./#.#.
###/.../#.. => ...#/...#/.#.#/.##.
.##/#../#.. => ##../#.#./#..#/##..
###/#../#.. => ##../.#.#/##../#..#
..#/.#./#.. => ##.#/##.#/...#/.#..
#.#/.#./#.. => .###/.#.#/###./....
.##/.#./#.. => #..#/###./####/..#.
###/.#./#.. => ..#./.###/.###/...#
.##/##./#.. => #.##/..##/...#/.###
###/##./#.. => ####/##.#/#.##/#..#
#../..#/#.. => ..../.##./#.##/#...
.#./..#/#.. => #..#/##../...#/#...
##./..#/#.. => ..#./.###/..##/.#.#
#.#/..#/#.. => .##./..##/..#./#..#
.##/..#/#.. => ####/.#.#/#.../.#.#
###/..#/#.. => ..../..##/#.##/###.
#../#.#/#.. => #.##/.#.#/.#../.##.
.#./#.#/#.. => ..##/###./.###/###.
##./#.#/#.. => ##.#/##.#/#.#./##..
..#/#.#/#.. => ###./###./.#.#/.#..
#.#/#.#/#.. => ##../..#./##../....
.##/#.#/#.. => .###/#.#./##.#/##..
###/#.#/#.. => ##.#/#.#./.#.#/#...
#../.##/#.. => .#.#/...#/.#.#/..#.
.#./.##/#.. => ###./##../##.#/....
##./.##/#.. => ..##/###./#.#./#.#.
#.#/.##/#.. => ##.#/..##/#..#/####
.##/.##/#.. => ..../####/..#./##..
###/.##/#.. => .###/#..#/..../.#..
#../###/#.. => #..#/.#../.#.#/#...
.#./###/#.. => .#../..../.##./.###
##./###/#.. => ##.#/.#../.#.#/#..#
..#/###/#.. => #.##/##../..##/#...
#.#/###/#.. => ####/..##/.#../##.#
.##/###/#.. => .###/#..#/.###/#.##
###/###/#.. => ..##/.##./##../#..#
.#./#.#/.#. => ..##/.##./.##./.###
##./#.#/.#. => ..##/...#/.##./####
#.#/#.#/.#. => .###/.###/#.#./.#..
###/#.#/.#. => ##.#/###./##.#/####
.#./###/.#. => ...#/..#./.#.#/.#..
##./###/.#. => ###./##.#/#.../#.#.
#.#/###/.#. => .##./#.#./...#/..#.
###/###/.#. => .#.#/.#../..##/####
#.#/..#/##. => .##./...#/#..#/.###
###/..#/##. => #.##/.#.#/...#/..##
.##/#.#/##. => ###./.###/...#/....
###/#.#/##. => .##./.##./#.#./#...
#.#/.##/##. => #.#./.##./.#.#/.###
###/.##/##. => ..../####/.#.#/#.##
.##/###/##. => .##./.###/###./.#..
###/###/##. => #.../###./.##./##.#
#.#/.../#.# => #.#./..../#.##/###.
###/.../#.# => .#../.#.#/#.../.###
###/#../#.# => ###./#..#/####/##..
#.#/.#./#.# => ###./##.#/..../.#..
###/.#./#.# => ####/.#.#/.#../..##
###/##./#.# => #.#./####/..##/#...
#.#/#.#/#.# => #.#./#.#./#.../#.##
###/#.#/#.# => #.##/.#../..#./.##.
#.#/###/#.# => .###/..##/####/#..#
###/###/#.# => #.../..#./..#./#.##
###/#.#/### => .#.#/.###/#.##/..##
###/###/### => #.#./...#/.#../.#.#`;

const lines = input.split('\n');

let image = [
  '.#.',
  '..#',
  '###'
];

function r(s) {
  const size = s.length;
  if (size === 2) {
    return [
      s[1][0] + s[0][0],
      s[1][1] + s[0][1]
    ];
  } else {
    return [
      s[2][0] + s[1][0] + s[0][0],
      s[2][1] + s[1][1] + s[0][1],
      s[2][2] + s[1][2] + s[0][2]
    ]
  }
}

function f(s) {
  const size = s.length;
  if (size === 2) {
    return [
      s[0][1] + s[0][0],
      s[1][1] + s[1][0]
    ];
  } else {
    return [
      s[0][2] + s[0][1] + s[0][0],
      s[1][2] + s[1][1] + s[1][0],
      s[2][2] + s[2][1] + s[2][0]
    ]
  }
}

function symmetries(pattern) {
  const s = pattern.split('/');
  return new Set([
    s, r(s), r(r(s)), r(r(r(s))),
    f(s), f(r(s)), f(r(r(s))), f(r(r(r(s))))
  ].map(sym => sym.join('/')));
}

function split(pattern) {
  const size = pattern.length;
  const blockSize = size % 2 === 0 ? 2 : 3;
  const blocks = [];
  for (let i = 0; i < size / blockSize; i++) {
    const blockRow = [];
    for (let j = 0; j < size / blockSize; j++) {
      const block = [];
      for (let x = 0; x < blockSize; x++) {
        let row = '';
        for (let y = 0; y < blockSize; y++) {
          row += pattern[blockSize * i + x][blockSize * j + y];
        }
        block.push(row);
      }
      blockRow.push(block);
    }
    blocks.push(blockRow);
  }
  return blocks;
}

function join(blocks) {
  return blocks.reduce((arr, blockRow) => {
    const rows = [];
    const blockSize = blockRow[0].length;
    for (let i = 0; i < blockSize; i++) {
      const row = blockRow.map(row => row[i]).join('');
      rows.push(row);
    }
    return arr.concat(rows);
  }, []);
}

const book = {};
lines.forEach(line => {
  const match = line.match(/(.*) => (.*)/);
  const inPattern = match[1];
  const outPattern = match[2];
  symmetries(inPattern).forEach(pattern => book[pattern] = outPattern);
});

let iterations = 18;
let i = 0;
while (i++ < iterations) {
  const blocks = split(image);
  const transformed = blocks.map(blockRow => {
    return blockRow.map(block => {
      const pattern = block.join('/');
      return book[pattern].split('/');
    });
  });
  image = join(transformed);
}
const result1 = (image.join('').match(/#/g) || []).length;
result1;
